!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BUFSIZE	tsh.c	51;"	d	file:
CC	Makefile	/^CC = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -g -Wall -O2 -D HAVE_CONFIG_H$/;"	m
COMPRESS	Makefile	/^COMPRESS = gzip$/;"	m
CP	Makefile	/^CP = cp$/;"	m
CheckJobs	runtime.c	/^void CheckJobs()$/;"	f
CreateCmdT	runtime.c	/^commandT* CreateCmdT(int n)$/;"	f
DELIVERY	Makefile	/^DELIVERY = Makefile *.h *.c test_type$/;"	m
EXTERN	interpreter.h	41;"	d
EXTERN	interpreter.h	43;"	d
EXTERN	interpreter.h	45;"	d
EXTERN	io.h	47;"	d
EXTERN	io.h	49;"	d
EXTERN	io.h	51;"	d
EXTERN	runtime.h	47;"	d
EXTERN	runtime.h	49;"	d
EXTERN	runtime.h	52;"	d
EXTERN	tsh.h	40;"	d
EXTERN	tsh.h	42;"	d
EXTERN	tsh.h	44;"	d
Exec	runtime.c	/^static void Exec(commandT* cmd, bool forceFork)$/;"	f	file:
FALSE	config.h	41;"	d
HANDIN	Makefile	/^	HANDIN=`pwd`\/${TEAM}-${VERSION}-${PROJ}.tar.gz;\\$/;"	m
Interpret	interpreter.c	/^void Interpret(char* cmdLine)$/;"	f
IsBuiltIn	runtime.c	/^static bool IsBuiltIn(char* cmd)$/;"	f	file:
IsReading	io.c	/^bool IsReading()$/;"	f
MAXLINE	config.h	45;"	d
MKDIR	Makefile	/^MKDIR = mkdir$/;"	m
MV	Makefile	/^MV = mv$/;"	m
NBUILTINCOMMANDS	runtime.c	65;"	d	file:
OBJS	Makefile	/^OBJS = ${SRCS:.c=.o}$/;"	m
PROGS	Makefile	/^PROGS = tsh$/;"	m
PROJ	Makefile	/^PROJ = tsh$/;"	m
Print	io.c	/^void Print(char* msg)$/;"	f
PrintNewline	io.c	/^void PrintNewline()$/;"	f
PrintPError	io.c	/^void PrintPError(char* msg)$/;"	f
RM	Makefile	/^RM = rm$/;"	m
ReleaseCmdT	runtime.c	/^void ReleaseCmdT(commandT **cmd){$/;"	f
ResolveExternalCmd	runtime.c	/^static bool ResolveExternalCmd(commandT* cmd)$/;"	f	file:
RunBuiltInCmd	runtime.c	/^static void RunBuiltInCmd(commandT* cmd)$/;"	f	file:
RunCmd	runtime.c	/^void RunCmd(commandT** cmd, int n)$/;"	f
RunCmdBg	runtime.c	/^void RunCmdBg(commandT* cmd)$/;"	f
RunCmdFork	runtime.c	/^void RunCmdFork(commandT* cmd, bool fork)$/;"	f
RunCmdPipe	runtime.c	/^void RunCmdPipe(commandT* cmd1, commandT* cmd2)$/;"	f
RunCmdRedirIn	runtime.c	/^void RunCmdRedirIn(commandT* cmd, char* file)$/;"	f
RunCmdRedirOut	runtime.c	/^void RunCmdRedirOut(commandT* cmd, char* file)$/;"	f
RunExternalCmd	runtime.c	/^static void RunExternalCmd(commandT* cmd, bool fork)$/;"	f	file:
SHELLNAME	config.h	43;"	d
SHELL_ARCH	Makefile	/^SHELL_ARCH = "64"$/;"	m
SRCS	Makefile	/^SRCS = interpreter.c io.c runtime.c tsh.c $/;"	m
TAR	Makefile	/^TAR = tar cvf$/;"	m
TEAM	Makefile	/^TEAM = `whoami`$/;"	m
TESTING_OBJS	Makefile	/^TESTING_OBJS = ${TESTING_SRCS:.c=.o}$/;"	m
TESTING_PROGS	Makefile	/^TESTING_PROGS = myspin mysplit mystop$/;"	m
TESTING_SRCS	Makefile	/^TESTING_SRCS = myspin.c mysplit.c mystop.c$/;"	m
TRUE	config.h	40;"	d
VAREXTERN	runtime.h	50;"	d
VAREXTERN	runtime.h	53;"	d
VERSION	Makefile	/^VERSION = `date +%Y%m%d%H%M%S`$/;"	m
VM_NAME	Makefile	/^VM_NAME = "Ubuntu_1404"$/;"	m
VM_PORT	Makefile	/^VM_PORT = "3022"$/;"	m
__CONFIG_H__	config.h	27;"	d
__INTERPRETER_H__	interpreter.h	24;"	d
__INTERPRETER_IMPL__	interpreter.c	21;"	d	file:
__IO_H__	io.h	30;"	d
__IO_IMPL__	io.c	31;"	d	file:
__MYSS_H__	tsh.h	24;"	d
__MYSS_IMPL__	tsh.c	31;"	d	file:
__RUNTIME_H__	runtime.h	30;"	d
__RUNTIME_IMPL__	runtime.c	37;"	d	file:
argc	runtime.h	/^  int argc;$/;"	m	struct:command_t
argv	runtime.h	/^  char* argv[];$/;"	m	struct:command_t
bg	runtime.h	/^  int bg;$/;"	m	struct:command_t
bgjobL	runtime.c	/^} bgjobL;$/;"	t	typeref:struct:bgjob_l	file:
bgjob_l	runtime.c	/^typedef struct bgjob_l {$/;"	s	file:
bgjobs	runtime.c	/^bgjobL *bgjobs = NULL;$/;"	v
bool	config.h	39;"	d
cleanUp	testsuite/run_testcase.sh	/^function cleanUp()$/;"	f
cleanUp	testsuite/run_testcase_pipe.sh	/^function cleanUp()$/;"	f
cleanUp	testsuite/run_testcase_redir.sh	/^function cleanUp()$/;"	f
cmdline	runtime.h	/^  char *cmdline;$/;"	m	struct:command_t
commandT	runtime.h	/^} commandT;$/;"	t	typeref:struct:command_t
command_t	runtime.h	/^typedef struct command_t$/;"	s
getCommandLine	io.c	/^void getCommandLine(char** buf, int size)$/;"	f
isReading	io.c	/^bool isReading = FALSE;$/;"	v
is_redirect_in	runtime.h	/^  int is_redirect_in, is_redirect_out;$/;"	m	struct:command_t
is_redirect_out	runtime.h	/^  int is_redirect_in, is_redirect_out;$/;"	m	struct:command_t
main	testsuite/myspin.c	/^int main(int argc, char **argv) $/;"	f
main	testsuite/mysplit.c	/^int main(int argc, char **argv) $/;"	f
main	testsuite/mystop.c	/^int main(int argc, char **argv) $/;"	f
main	tsh.c	/^int main (int argc, char *argv[])$/;"	f
name	runtime.h	/^  char* name;$/;"	m	struct:command_t
next	interpreter.c	/^  struct string_l* next;$/;"	m	struct:string_l	typeref:struct:string_l::string_l	file:
next	runtime.c	/^  struct bgjob_l* next;$/;"	m	struct:bgjob_l	typeref:struct:bgjob_l::bgjob_l	file:
parser_single	interpreter.c	/^void parser_single(char *c, int sz, commandT** cd, int bg)$/;"	f
pid	runtime.c	/^  pid_t pid;$/;"	m	struct:bgjob_l	file:
redirect_in	runtime.h	/^  char *redirect_in, *redirect_out;$/;"	m	struct:command_t
redirect_out	runtime.h	/^  char *redirect_in, *redirect_out;$/;"	m	struct:command_t
s	interpreter.c	/^  char* s;$/;"	m	struct:string_l	file:
sig	tsh.c	/^static void sig(int signo)$/;"	f	file:
single_param	interpreter.c	/^char* single_param(char *st)$/;"	f
stringL	interpreter.c	/^} stringL;$/;"	t	typeref:struct:string_l	file:
string_l	interpreter.c	/^typedef struct string_l {$/;"	s	file:
total_task	runtime.c	/^int total_task;$/;"	v
usage	testsuite/sdriver.pl	/^sub usage $/;"	s
